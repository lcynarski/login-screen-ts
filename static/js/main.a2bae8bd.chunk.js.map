{"version":3,"sources":["assets/dogGif1.gif","assets/background-0.jpg","authContext.ts","appScreen/AppScreen.tsx","loginForm/components/formTextField.tsx","loginForm/validation.ts","loginForm/loginForm.tsx","loginScreen/loginScreen.tsx","routing/routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AuthContext","React","createContext","authenticated","setAuthenticated","state","useStyles","makeStyles","root","backgroundImage","height","display","flexDirection","alignItems","justifyContent","color","AppScreen","classes","className","src","gif","alt","FormTextField","label","id","type","fullWidth","isLoginError","props","useField","field","meta","helperText","useMemo","touched","error","TextField","variant","validationSchema","Yup","email","required","password","min","matches","background","border","borderRadius","padding","width","opacity","header","form","textField","paddingBottom","LoginForm","useState","loggingInProgress","setLoggingInProgress","loginError","setLoginError","useContext","history","useHistory","Paper","initialValues","onSubmit","values","actions","axios","post","then","resp","push","catch","res","finally","logIn","name","CircularProgress","Button","role","disabled","backgroundRepeat","backgroundSize","flexGrow","LoginScreen","PrivateRoute","children","rest","path","render","location","to","pathname","from","NoMatch","Routes","exact","component","App","Provider","value","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a2bae8bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dogGif1.82116b64.gif\";","module.exports = __webpack_public_path__ + \"static/media/background-0.adc51480.jpg\";","import React from 'react';\r\n\r\nconst AuthContext = React.createContext({\r\n    authenticated: false,\r\n    setAuthenticated: (state : boolean) => {}\r\n});\r\n\r\nexport default AuthContext;","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport gif from \"../assets/dogGif1.gif\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundImage: \"linear-gradient(red, yellow, green)\",\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: \"white\"\r\n    },\r\n});\r\n\r\nconst AppScreen = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <h1>Successfully logged in</h1>\r\n            <img src={gif} alt=\"dog meme\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppScreen;","import React, { useMemo } from \"react\";\r\nimport {FieldAttributes, useField} from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\ninterface TextFieldProps {\r\n    label: string,\r\n    id: string,\r\n    type: string,\r\n    fullWidth: boolean,\r\n    className: string,\r\n    isLoginError?: boolean\r\n}\r\n\r\nconst FormTextField = ({ label, id, type, fullWidth, isLoginError = false, className, ...props }: TextFieldProps & FieldAttributes<{}>) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    const helperText = useMemo(() => {\r\n        if (meta.touched && meta.error) return meta.error;\r\n        if (isLoginError) return 'Selected email or password does not exist';\r\n        return null;\r\n    }, [meta.touched, meta.error, isLoginError]);\r\n\r\n    return (\r\n        <TextField\r\n            id={id}\r\n            label={label}\r\n            type={type}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            className={className}\r\n            {...field}\r\n            error={!!(meta.touched && meta.error)}\r\n            helperText={helperText}\r\n        />\r\n    );\r\n};\r\n\r\nexport default FormTextField;","import * as Yup from \"yup\"\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email(\"Enter a valid email address\")\r\n        .required(\"Email is required\"),\r\n    password: Yup.string()\r\n        .min(8, \"Password must contain at least 8 characters\")\r\n        .matches(/^(?=.*[0-9])(?=.*[A-Z]).*/, \"Password must contain at least 1 upper letter and at least on number\")\r\n        .required(\"Password is required\")\r\n})\r\n\r\nexport default validationSchema;","import React, {useContext, useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {FormikProps, Form, Formik} from 'formik';\r\nimport axios from \"axios\"\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FormTextField from \"./components/formTextField\";\r\nimport validationSchema from \"./validation\";\r\nimport AuthContext from \"../authContext\";\r\n\r\n\r\ninterface Values {\r\n    email: string;\r\n    password: string\r\n}\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        background: 'white',\r\n        border: 0,\r\n        borderRadius: 6,\r\n        padding: '20px 30px 0',\r\n        width: 600,\r\n        height: 440,\r\n        \"@media only screen and (max-width: 600px)\": {\r\n            opacity: 0.9,\r\n            height: \"100%\",\r\n            width: \"100%\"\r\n        }\r\n    },\r\n    header: {\r\n        padding: '30px 0'\r\n    },\r\n    form: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        width: '100%'\r\n    },\r\n    textField: {\r\n        paddingBottom: 20\r\n    }\r\n});\r\n\r\nconst API_URL = 'https://iqot98h9u0.execute-api.eu-west-1.amazonaws.com/default/';\r\n\r\nconst LoginForm = () => {\r\n    const [loggingInProgress, setLoggingInProgress] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n    const {setAuthenticated} = useContext(AuthContext);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n            email: '',\r\n            password: ''\r\n    }\r\n\r\n    const logIn = (values: Values) => {\r\n        axios.post(API_URL, {\r\n            email: values.email,\r\n            password: values.password\r\n        })\r\n            .then((resp) => {\r\n                if (loginError) setLoginError(false);\r\n                setAuthenticated(true);\r\n                history.push(\"/home\");\r\n            })\r\n            .catch((res) => {\r\n                setLoginError(true);\r\n                setAuthenticated(false);\r\n            })\r\n            .finally(() => setLoggingInProgress(false));\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <h1 className={classes.header}>Welcome to our solution</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={(values, actions) => {\r\n                    setLoggingInProgress(true);\r\n                    logIn(values);\r\n                }}\r\n                validationSchema={validationSchema}\r\n            >\r\n                {(props: FormikProps<Values>) => (\r\n                    <Form className={classes.form}>\r\n                        <FormTextField\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            isLoginError={loginError}\r\n                            className={classes.textField}\r\n                        />\r\n                        <FormTextField\r\n                            name=\"password\"\r\n                            id=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            fullWidth\r\n                            className={classes.textField}\r\n                        />\r\n                        {loggingInProgress ?\r\n                            <CircularProgress color=\"secondary\" /> :\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                fullWidth={true}\r\n                                role=\"submit\"\r\n                                disabled={loggingInProgress}\r\n                            >\r\n                                Log In\r\n                            </Button>\r\n                        }\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LoginForm from \"../loginForm/loginForm\";\r\nimport background from \"../assets/background-0.jpg\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        background: `url(${background}) center`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"cover\",\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n});\r\n\r\nconst LoginScreen = () => {\r\n    const classes = useStyles();\r\n\r\n    return (<div className={classes.root}>\r\n        <LoginForm />\r\n    </div>)\r\n}\r\n\r\nexport default LoginScreen;","import React, {FunctionComponent, useContext} from 'react';\r\nimport AuthContext from \"../authContext\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport AppScreen from \"../appScreen/AppScreen\";\r\nimport LoginScreen from \"../loginScreen/loginScreen\";\r\n\r\ninterface PrivateRouteProps {\r\n    children: React.ReactNode,\r\n    path: string\r\n}\r\n\r\nconst PrivateRoute: FunctionComponent<PrivateRouteProps> = ({ children, path, ...rest }) => {\r\n    const { authenticated } = useContext(AuthContext);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                authenticated ? (\r\n                    children\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/\",\r\n                            state: { from: location }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nconst NoMatch = () => <h1>404 Not Found</h1>\r\n\r\nconst Routes = () => (\r\n    <Switch>\r\n        <PrivateRoute path=\"/home\">\r\n            <AppScreen />\r\n        </PrivateRoute>\r\n        <Route exact path=\"/\">\r\n            <LoginScreen />\r\n        </Route>\r\n        <Route component={NoMatch} />\r\n    </Switch>\r\n)\r\n\r\nexport default Routes;","import React, {useState} from 'react';\nimport {\n    HashRouter as Router\n} from \"react-router-dom\";\nimport AuthContext from \"./authContext\";\nimport Routes from \"./routing/routes\";\n\n\nfunction App() {\n    const [authenticated, setAuthenticated] = useState(false);\n\n    return (\n      <Router>\n          <AuthContext.Provider value={{authenticated, setAuthenticated}} >\n              <Routes />\n          </AuthContext.Provider>\n      </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}